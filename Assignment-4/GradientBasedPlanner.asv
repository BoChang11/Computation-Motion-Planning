function route = GradientBasedPlanner (f, start_coords, end_coords, max_its)
% GradientBasedPlanner : This function plans a path through a 2D
% environment from a start to a destination based on the gradient of the
% function f which is passed in as a 2D array. The two arguments
% start_coords and end_coords denote the coordinates of the start and end
% positions respectively in the array while max_its indicates an upper
% bound on the number of iterations that the system can use before giving
% up.
% The output, route, is an array with 2 columns and n rows where the rows
% correspond to the coordinates of the robot as it moves along the route.
% The first column corresponds to the x coordinate and the second to the y coordinate
[gy, gx] = gradient (-f);
curr = start_coords;
route = [];
 x = f(1);
    y = f(2);
    gx_i = gx(round(y),round(x)); 
    gy_i = gy(round(y),round(x));
    gx_n = gx/(gx.^2 + gy.^2);
    gy_n = gy/(gx.^2 + gy.^2); 
for i=1:max_its
    route = [start_coords];
%%% All of your code should be between the two lines of stars.
% *******************************************************************
    dist_goal = ((end_coords(2)- start_coords(2))^2 + (end_coords(1)- start_coords(1))^2 )^0.5 ;
    while dist_goal < 2.0
        new_pos = [gx_n,gy_n];
        curr = curr + new_pos;
        route = [route;curr];
    end
end
% *******************************************************************
end
